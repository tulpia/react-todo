{"version":3,"sources":["components/Title/Title.js","components/Todos/Todo/Todo.js","components/Todos/InputTodo/InputTodo.js","components/Todos/Todos.js","App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","className","Todo","_ref","todo","handleDelete","index","onClick","InputTodo","handleSubmit","title","handleTitle","onSubmit","type","name","value","onChange","placeholder","todos","Todos","state","handleTodoAdd","event","preventDefault","Object","toConsumableArray","_this","todoAdded","push","setState","target","splice","_this2","this","map","Todos_Todo_Todo","key","e","Todos_InputTodo_InputTodo","React","Component","App","components_Title_Title","components_Todos_Todos","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8KAWeA,eATD,WACV,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACZH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,QACAH,EAAAC,EAAAC,cAAA,0FCQIE,EAZF,SAAAC,GAAmC,IAAhCC,EAAgCD,EAAhCC,KAAMC,EAA0BF,EAA1BE,aAAcC,EAAYH,EAAZG,MAChC,OACIR,EAAAC,EAAAC,cAAA,WAASC,UAAU,eACfH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,sBAAsBK,GACnCR,EAAAC,EAAAC,cAAA,KAAGC,UAAU,qBAAqBG,GAClCN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAsBM,QAASF,GAC1CP,EAAAC,EAAAC,cAAA,sBCiBDQ,EAvBG,SAAAL,GAA0C,IAAvCM,EAAuCN,EAAvCM,aAAcC,EAAyBP,EAAzBO,MAAOC,EAAkBR,EAAlBQ,YACtC,OACIb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,QAAMY,SAAUH,GACZX,EAAAC,EAAAC,cAAA,SACIa,KAAM,OACNC,KAAM,WACNC,MAAOL,EACPM,SAAUL,EACVV,UAAU,mBACVgB,YAAY,oBAEhBnB,EAAAC,EAAAC,cAAA,UACIa,KAAK,SACLZ,UAAU,sBAEVH,EAAAC,EAAAC,cAAA,wBCddkB,EAAQ,GAoECC,6MA/DXC,MAAQ,CACJF,QACAR,MAAO,MAIXW,cAAgB,SAAAC,GAEZA,EAAMC,iBAGN,IAAML,EAAKM,OAAAC,EAAA,EAAAD,CAAQE,EAAKN,MAAMF,OAGxBS,EAAY,CAAEvB,KAAQsB,EAAKN,MAAMV,OACvCQ,EAAMU,KAAKD,GACXD,EAAKG,SAAS,CACVX,UAIJQ,EAAKG,SAAS,CACVnB,MAAO,QAIfC,YAAc,SAAAW,GACVI,EAAKG,SAAS,CACVnB,MAAOY,EAAMQ,OAAOf,WAK5BV,aAAe,SAAAC,GACX,IAAMY,EAAKM,OAAAC,EAAA,EAAAD,CAAQE,EAAKN,MAAMF,OAC9BA,EAAMa,OAAOzB,EAAO,GAEpBoB,EAAKG,SAAS,CACVX,mFAIC,IAAAc,EAAAC,KACL,OACInC,EAAAC,EAAAC,cAAA,WAASC,UAAU,SACdgC,KAAKb,MAAMF,MAAMgB,IAAI,SAACnB,EAAOT,GAAR,OAClBR,EAAAC,EAAAC,cAACmC,EAAD,CACAC,IAAK9B,EACLA,MAAOA,EACPF,KAAMW,EAAMX,KACZC,aAAc,SAACgC,GAAD,OAAOL,EAAK3B,aAAaC,QAG3CR,EAAAC,EAAAC,cAACsC,EAAD,CACI5B,MAAOuB,KAAKb,MAAMV,MAClBD,aAAcwB,KAAKZ,cACnBV,YAAasB,KAAKtB,sBA1DlB4B,IAAMC,WCgBXC,MATf,WACE,OACE3C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC0C,EAAD,MACA5C,EAAAC,EAAAC,cAAC2C,EAAD,QCNcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f8a2c6f7.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Title = () => {\r\n    return (\r\n        <div className=\"todo-title\">\r\n           <p className=\"title\">Todo</p>\r\n           <p>made with ❤️ in React.</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Title\r\n","import React from 'react'\r\n\r\nconst Todo = ({ todo, handleDelete, index }) => {\r\n    return (\r\n        <article className=\"todo-single\">\r\n            <p className=\"todo-single__index\">{index}</p>\r\n            <p className=\"todo-single__todo\">{todo}</p>\r\n            <div className=\"todo-single__delete\" onClick={handleDelete}>\r\n                <p>delete</p>\r\n            </div>\r\n        </article>\r\n    )\r\n}\r\n\r\nexport default Todo\r\n","import React from 'react'\r\n\r\nconst InputTodo = ({ handleSubmit, title, handleTitle }) => {\r\n    return (\r\n        <div className=\"input-todo\">\r\n            <form onSubmit={handleSubmit}>\r\n                <input \r\n                    type= 'text'\r\n                    name= 'todoText'\r\n                    value={title}\r\n                    onChange={handleTitle}\r\n                    className=\"input-todo__text\"\r\n                    placeholder=\"Ajouter un todo\"\r\n                />\r\n                <button \r\n                    type=\"submit\"\r\n                    className=\"input-todo__submit\"\r\n                >\r\n                    <p>Valider</p>\r\n                </button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InputTodo\r\n","import React from 'react'\r\nimport Todo from './Todo/Todo'\r\nimport InputTodo from './InputTodo/InputTodo'\r\n\r\nconst todos = [\r\n]\r\n\r\nclass Todos extends React.Component\r\n{\r\n    state = {\r\n        todos,\r\n        title: ''\r\n    }\r\n\r\n    // ajouter un todo\r\n    handleTodoAdd = event => {\r\n        // premierement, on empêche le comportement normal du formulaire\r\n        event.preventDefault()\r\n        \r\n        // Puis, on copie le state pour plus tard le changer dans un setState\r\n        const todos = [ ...this.state.todos ]\r\n\r\n        // On créé une variable temporaire contenant la value de l'input pour ensuite l'ajouter dans le state en faisant un push\r\n        const todoAdded = { 'todo': this.state.title }\r\n        todos.push(todoAdded)\r\n        this.setState({\r\n            todos\r\n        })\r\n\r\n        // On reset la value de title pour vider le champ texte\r\n        this.setState({\r\n            title: ''\r\n        })\r\n    }\r\n\r\n    handleTitle = event => {\r\n        this.setState({\r\n            title: event.target.value\r\n        })\r\n    }\r\n\r\n    // Supprimer le todo au on click\r\n    handleDelete = index => {\r\n        const todos = [ ...this.state.todos ]\r\n        todos.splice(index, 1)\r\n\r\n        this.setState({\r\n            todos\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <section className=\"Todos\">\r\n                {this.state.todos.map((value, index) => \r\n                    <Todo\r\n                    key={index}\r\n                    index={index}\r\n                    todo={value.todo}\r\n                    handleDelete={(e) => this.handleDelete(index)} />\r\n                )}\r\n\r\n                <InputTodo\r\n                    title={this.state.title}\r\n                    handleSubmit={this.handleTodoAdd}\r\n                    handleTitle={this.handleTitle}\r\n                />\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Todos","import React from 'react';\nimport './App.scss';\nimport Title from './components/Title/Title'\nimport Todos from './components/Todos/Todos'\n\n/*\nTODO : Un todo\n\n1/ Creer un component title (pour le titre en haut qui dira 'TODO, Made in React)\n2/ Creer un component Todos, qui contiendra le state et une loop sur celui-ci\n3/ Creer un component Todo, qui contiendra la template d'un single todo\n4/ Creer des Buttons pour Supprimer le todo, l'editer\n*/\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Title />\n      <Todos />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}